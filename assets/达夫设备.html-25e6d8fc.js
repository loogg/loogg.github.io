import{_ as l,r as o,o as p,c as e,a as s,b as n,d as c,e as B}from"./app-54742b2e.js";const t={},r=s("h2",{id:"参考链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),n(" 参考链接")],-1),y={href:"https://blog.csdn.net/u010632165/article/details/124358340",target:"_blank",rel:"noopener noreferrer"},D=B(`<h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> n </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (count </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> ) </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (count </span><span style="color:#C678DD;">%</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> :    </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">           } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> ( </span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;"> n </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是达夫设备" tabindex="-1"><a class="header-anchor" href="#什么是达夫设备" aria-hidden="true">#</a> 什么是达夫设备</h2><p>百度百科说法如下：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在计算机科学领域，达夫设备（英文：Duff&#39;s device）是串行复制（serial copy）的一种优化实现，通过汇编语言编程时一常用方法，实现展开循环，进而提高执行效率。这一方法据信为当时供职于卢卡斯影业的汤姆·达夫于1983年11月发明，并可能是迄今为止利用C语言switch语句特性所作的最巧妙的实现。</p></div><p>达夫设备是一个加速循环语句的C编码技巧。其 <strong>基本思想</strong> 是--减少循环测试的执行次数。</p><h2 id="实现机制" tabindex="-1"><a class="header-anchor" href="#实现机制" aria-hidden="true">#</a> 实现机制</h2><ul><li><p>在达夫解决这个问题的时候，当时的C语言对switch语句的规范是比较松的，在switch控制语句内，条件标号（case）可以出现在任意子语句之前，充作其前缀。</p></li><li><p>此外若未加入break语句，则在switch语句在根据条件判定，跳转到对应的标号，并在开始执行后，控制流会一直执行到switch嵌套语句的末尾。</p></li><li><p>利用这种特性，这段代码可以从连续地址中将count个数据复制到存储器中，映射输出寄存器中。</p></li><li><p>另一方面，C语言本身也对跳转到循环内部提供了支持，因而此处的switch/case语句便可跳转到循环内部。</p></li></ul><h2 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h2><ul><li><p>程序执行到了switch的时候，就会根据n的值，直接跳转到 case n那里，再当它执行到while那里时，就会判断循环条件。若为真，则while循环开始，程序跳转到do那里开始执行循环；为假，则退出循环，即程序中止。（这个swicth语句就再也没有用了）</p></li><li><p>我们再看以下代码，这里 count 个字节从 from 指向的数组复制到 to 指向的内存地址，是个内存映射的输出寄存器。它把 swtich 语句和复制 8 个字节的循环交织在一起, 从而解决了剩余字节的处理问题 (当 count % 8 ！= 0)。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> n </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (count </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> ) </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (count </span><span style="color:#C678DD;">%</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> :    </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">    case </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> :          </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> to </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> from </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">           } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> ( </span><span style="color:#C678DD;">--</span><span style="color:#ABB2BF;"> n </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>switch内的表达式计算被8除的余数。执行开始于while循环内的哪个位置由这个余数决定，直到最终循环退出（没有break）。Duff&#39;s Device这样就简单漂亮地解决了边界条件的问题。</p></li></ul>`,10);function i(A,F){const a=o("ExternalLinkIcon");return p(),e("div",null,[r,s("p",null,[s("a",y,[n("C语音冷门知识点：达夫机！switch还可以这么玩"),c(a)])]),D])}const d=l(t,[["render",i],["__file","达夫设备.html.vue"]]);export{d as default};
