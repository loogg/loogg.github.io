import{_ as l,r as e,o as p,c,a as s,b as i,d as o,e as n}from"./app-3ca712e6.js";const r="/C_C艹/pragma_pack.png",t="/C_C艹/attribute_aligned.png",d={},B=n('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>不要迷信书、考题、老师、回帖；<br> 要迷信CPU、编译器、调试器、运行结果。</p></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>代码编辑器的提示不可全信，要相信运行结果，如 sizeof()</p></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',4),u={href:"https://blog.csdn.net/hxj_csdn/article/details/88367435",target:"_blank",rel:"noopener noreferrer"},y=n(`<h2 id="结构体成员对齐规则" tabindex="-1"><a class="header-anchor" href="#结构体成员对齐规则" aria-hidden="true">#</a> 结构体成员对齐规则</h2><p>结构体成员对齐有2个规则，分别是 <strong>自然对齐</strong> 和 <strong>自定义对齐</strong>。</p><p>自定义对齐分为两个修饰方式：<code>#pragma pack(n)</code> 和 <code>__attribute__((aligned (n)))</code></p><h2 id="自然对齐规则" tabindex="-1"><a class="header-anchor" href="#自然对齐规则" aria-hidden="true">#</a> 自然对齐规则</h2><ul><li><p>按照结构体成员中size最大的成员对齐</p></li><li><p>如果结构体A内还有结构体B，则相当于把结构体B的成员放到结构A中，再进行size成员对齐，这个过程可以是反复迭代的，但是结构体B需要先作内部对齐，再参与整体对齐</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example2</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> c1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> c2;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1 struct1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> e;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">-</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example1</span><span style="color:#ABB2BF;">),</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">16-32</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>struct example1</p><ul><li><code>char a</code> 占用 1 字节</li><li>补齐对齐：因为 <code>double b</code> 是 8 字节，需要在 <code>char a</code> 后补齐 7 个字节</li><li>总计：1 (char a) + 7 (padding) + 8 (double b) = 16 字节</li></ul></li><li><p>struct example2</p><ul><li><code>char c1</code> 占用 1 字节</li><li>补齐对齐：因为 <code>int c2</code> 是 4 字节，需要在 <code>char c1</code> 后补齐 3 个字节</li><li>1 (char c1) + 3 (padding) + 4 (int c2) = 8 字节，满足 8 字节对齐</li><li><code>struct example1 struct1</code> 占用 16 字节</li><li><code>int e</code> 占用 4 字节</li><li>补齐对齐：因为 <code>struct example1 struct1</code> 按照 8 字节对齐，需要在 <code>int e</code> 后补齐 4 个字节</li><li>总计：1 (char c1) + 3 (padding) + 4 (int c2) + 16 (struct example1 struct1) + 4 (int e) + 4 (padding) = 32 字节</li></ul></li></ul></div><h2 id="自定义对齐之-pragma-pack-n" tabindex="-1"><a class="header-anchor" href="#自定义对齐之-pragma-pack-n" aria-hidden="true">#</a> 自定义对齐之#pragma pack(n)</h2><p>结构体的成员相对于第一个成员地址的偏移量的对齐方式，需要是n的倍数</p><figure><img src="`+r+`" alt="pragma_pack" tabindex="0" loading="lazy"><figcaption>pragma_pack</figcaption></figure><ul><li><p>n必须是大于0的2的次方值</p></li><li><p>默认对齐规则：是自然对齐规则</p></li><li><p>如果指定的n大于结构体中最大成员的size，则按照默认对齐规则</p></li><li><p>#pragma pack()表示接下来的内容取消对齐优化，按照自然对齐规则进行对齐</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#pragma</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">pack</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">#pragma</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">pack</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example2</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> c1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> c2;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1 struct1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> e;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">-</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example1</span><span style="color:#ABB2BF;">),</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">10-24</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>struct example1</p><ul><li><code>char a</code> 占用 1 字节</li><li><code>double b</code> 占用 8 字节</li><li>因为采用 2 字节对齐，所以总计 1 (char a) + 1 (padding) + 8 (double b) = 10 字节</li></ul></li><li><p>struct example2</p><ul><li><code>char c1</code> 占用 1 字节</li><li>补齐对齐：因为 <code>int c2</code> 是 4 字节，需要在 <code>char c1</code> 后补齐 3 个字节</li><li><code>struct example1 struct1</code> 占用 10 字节</li><li>补齐对齐：因为 <code>int e</code> 是 4 字节，需要在 <code>struct example1 struct1</code> 后补齐 2 个字节</li><li><code>int e</code> 占用 4 字节</li><li>总计：1 (char c1) + 3 (padding) + 4 (int c2) + 10 (struct example1 struct1) + 2 (padding) + 4 (int e) = 24 字节</li></ul></li></ul></div><h2 id="自定义对齐之-attribute-aligned-n" tabindex="-1"><a class="header-anchor" href="#自定义对齐之-attribute-aligned-n" aria-hidden="true">#</a> 自定义对齐之__attribute__((aligned (n)))</h2><p>指定结构体类型的变量分配地址空间时的地址对齐方式，该结构体类型的变量在分配地址空间时，其存放的地址一定按照n字节对齐，并且其占用的空间也是n的整数倍</p><figure><img src="`+t+`" alt="attribute_aligned" tabindex="0" loading="lazy"><figcaption>attribute_aligned</figcaption></figure><ul><li><p>n必须是大于0的2的次方值</p></li><li><p>默认对齐规则：先按自然对齐规则计算总大小，然后取一个2的次方值，使得该值大于等于总大小</p></li><li><p>如果指定的n大于结构体中最大成员的size，则按照默认对齐规则</p></li><li><p>如果指定的n小于结构体中某个成员的size，则按照自然对齐规则</p></li><li><p>修饰结构体后，该结构体在后续的任何地方都将保持修饰后计算得到的值进行字节对齐</p></li><li><p><code>__attribute__((packed))</code> 表示取消对齐优化</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span><span style="color:#61AFEF;">__attribute__</span><span style="color:#ABB2BF;">((</span><span style="color:#61AFEF;">aligned</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example2</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> c1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> c2;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> example1 struct1;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> e;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">-</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example1</span><span style="color:#ABB2BF;">),</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> example2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">1024-3072</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>struct example1</p></li><li><p>struct example1</p><ul><li><code>char a</code> 占用 1 字节</li><li>补齐对齐：因为 <code>double b</code> 是 8 字节，需要在 <code>char a</code> 后补齐 7 个字节</li><li>因为结构体的对齐方式是 1024 字节，需要在 <code>double b</code> 后补齐 1008 个字节</li><li>总计：1 (char a) + 7 (padding) + 8 (double b) + 1008 (padding) = 1024 字节</li></ul></li><li><p>struct example2</p><ul><li><code>char c1</code> 占用 1 字节</li><li>补齐对齐：因为 <code>int c2</code> 是 4 字节，需要在 <code>char c1</code> 后补齐 3 个字节</li><li>因为结构体的对齐方式是 1024 字节， 需要在 <code>int c2</code> 后补齐 1016 个字节</li><li><code>struct example1 struct1</code> 占用 1024 字节</li><li><code>int e</code> 占用 4 字节</li><li>补齐对齐：因为结构体的对齐方式是 1024 字节，需要在 <code>int e</code> 后补齐 1020 个字节</li><li>总计：1 (char c1) + 3 (padding) + 4 (int c2) + 1016 (padding) + 1024 (struct example1 struct1) + 4 (int e) + 1020 (padding) = 3072 字节</li></ul></li></ul></div>`,25);function v(m,b){const a=e("ExternalLinkIcon");return p(),c("div",null,[B,s("p",null,[s("a",u,[i("结构体成员对齐之#pragma pack(n)和__attribute__((aligned (n)))的含义和区别"),o(a)])]),y])}const F=l(d,[["render",v],["__file","结构体成员对齐.html.vue"]]);export{F as default};
