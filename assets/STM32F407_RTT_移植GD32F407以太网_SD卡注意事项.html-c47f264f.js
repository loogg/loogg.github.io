import{_ as s,o as n,c as a,e as i}from"./app-95bdce04.js";const e="/MCU/GD32/ENET修改.png",l="/MCU/GD32/SD异常日志.png",t="/MCU/GD32/SDIO状态寄存器.png",c="/MCU/GD32/sdio_irq.png",p="/MCU/GD32/sdio_send_command.png",o={},d=i('<h2 id="以太网" tabindex="-1"><a class="header-anchor" href="#以太网" aria-hidden="true">#</a> 以太网</h2><p>参考 GD 官方文档 <a href="/MCU/GD32/STM32F4xx_to_GD32F4xx系列_V1.1.pdf" target="_blank">STM32F4xx_to_GD32F4xx系列_V1.1.pdf</a></p><figure><img src="'+e+`" alt="ENET修改" tabindex="0" loading="lazy"><figcaption>ENET修改</figcaption></figure><p>修改 <code>stm32f4xx_hal_eth.c</code> 中 <code>static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)</code></p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  __IO uint32_t tmpreg1 = 0U;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  /* Set the Flush Transmit FIFO bit */</span></span>
<span class="line"><span style="color:#ABB2BF;">  (heth-&gt;Instance)-&gt;DMAOMR |= ETH_DMAOMR_FTF;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  /* Wait until the write operation will be taken into account:</span></span>
<span class="line"><span style="color:#ABB2BF;">     at least four TX_CLK/RX_CLK clock cycles */</span></span>
<span class="line"><span style="color:#98C379;">+ while (((heth-&gt;Instance)-&gt;DMAOMR &amp; ETH_DMAOMR_FTF) != RESET);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  tmpreg1 = (heth-&gt;Instance)-&gt;DMAOMR;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ETH_Delay(ETH_REG_WRITE_DELAY);</span></span>
<span class="line"><span style="color:#ABB2BF;">  (heth-&gt;Instance)-&gt;DMAOMR = tmpreg1;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sd卡" tabindex="-1"><a class="header-anchor" href="#sd卡" aria-hidden="true">#</a> SD卡</h2><ul><li><p>调试发现使用的是 DMA 方式，数据对齐是 4 字节。SD卡初始化过程中先发 ACMD55，然后 CMD 51 命令读取 SCR 寄存器 8 个 字节时出现了异常。</p></li><li><p>SDIO_FIFOCNT 寄存器为 0了，但是 SDIO_STAT 寄存器的值为 0x0020A400</p></li><li><p>日志如下，CMD6 同样是接收长度，只不过长度为 64，CMD51长度为8</p><figure><img src="`+l+'" alt="SD异常日志" tabindex="0" loading="lazy"><figcaption>SD异常日志</figcaption></figure><figure><img src="'+t+'" alt="SDIO状态寄存器" tabindex="0" loading="lazy"><figcaption>SDIO状态寄存器</figcaption></figure></li><li><p>处理该问题</p><p>由于在 <code>rthw_sdio_irq_process</code> 中断处理函数中，在需要数据交互条件下，产生 <code>DATAEND</code> 中断时发送事件集。</p><p>因此在 <code>rthw_sdio_send_command</code> 中可以屏蔽接收状态位的判断。</p><figure><img src="'+c+'" alt="sdio_irq" tabindex="0" loading="lazy"><figcaption>sdio_irq</figcaption></figure><figure><img src="'+p+'" alt="sdio_send_command" tabindex="0" loading="lazy"><figcaption>sdio_send_command</figcaption></figure></li></ul>',7),r=[d];function _(g,m){return n(),a("div",null,r)}const h=s(o,[["render",_],["__file","STM32F407_RTT_移植GD32F407以太网_SD卡注意事项.html.vue"]]);export{h as default};
