import{_ as t,o as e,c as d,f as a}from"./app-7cafe3c1.js";const c="/assets/run-8862ea6d.png",r={},o=a('<h1 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明" aria-hidden="true">#</a> 示例说明</h1><h2 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h2><p>该示例提供使用 <code>RT-Thread</code> 固件打包工具生成固件的解析演示。</p><p><code>WSL</code> 或 <code>Linux</code> 下使用 <code>gcc</code> 可直接 <code>make</code> 编译，在电脑上运行测试程序。</p><p>目录结构：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>fastlz-1.0.1</td><td>fastlz 库源码</td></tr><tr><td>quicklz-1.0.1</td><td>quicklz 库源码</td></tr><tr><td>tinycrypt-1.1.0</td><td>tinycrypt 库源码</td></tr><tr><td>figures</td><td>素材</td></tr><tr><td>inc</td><td>头文件</td></tr><tr><td>src</td><td>源代码</td></tr></tbody></table><h2 id="_2、使用" tabindex="-1"><a class="header-anchor" href="#_2、使用" aria-hidden="true">#</a> 2、使用</h2><ol><li><p>命令行敲击 <code>make clean</code> 、 <code>make</code></p></li><li><p>使用固件打包工具生成固件。固件打包工具在 Agile Upgrade 的 <code>tools</code> 路径下</p></li><li><p>执行命令 <code>./test ${file}.rbl</code>，解析完的固件存放在当前路径下的 <code>upgrade.bin</code> 中</p><figure><img src="'+c+'" alt="run" tabindex="0" loading="lazy"><figcaption>run</figcaption></figure></li></ol>',8),i=[o];function n(l,s){return e(),d("div",null,i)}const p=t(r,[["render",n],["__file","index.html.vue"]]);export{p as default};
