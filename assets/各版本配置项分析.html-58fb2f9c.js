import{_ as a,r as o,o as p,c as e,a as s,d as t,w as c,b as n,e as r}from"./app-c238f2fb.js";const B={},i=s("h2",{id:"rt-thread-5-1-0",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rt-thread-5-1-0","aria-hidden":"true"},"#"),n(" RT-Thread 5.1.0")],-1),y=s("h3",{id:"rt-using-nano",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rt-using-nano","aria-hidden":"true"},"#"),n(" RT_USING_NANO")],-1),A=s("li",null,[s("p",null,"一键配置为极简版内核，只保留了以下配置项:"),s("ul",null,[s("li",null,"内核配置"),s("li",null,"Finsh 配置"),s("li",null,"软件包配置")])],-1),F=s("p",null,"资源对比可参考这篇文章",-1),d=r(`<h3 id="rt-using-hook、rt-hook-using-func-ptr" tabindex="-1"><a class="header-anchor" href="#rt-using-hook、rt-hook-using-func-ptr" aria-hidden="true">#</a> RT_USING_HOOK、RT_HOOK_USING_FUNC_PTR</h3><p>只有同时使能这两项时，<code>RT_OBJECT_HOOK_CALL</code> 才会真正调用回调函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_USING_HOOK</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOK_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> Add hook point in the routines</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@note</span><span style="color:#7F848E;font-style:italic;"> Usage:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * void foo() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     do_something();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     RT_OBJECT_HOOK_CALL(foo);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     do_other_things();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_RT_OBJECT_HOOK_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">__ON_HOOK_ARGS</span><span style="color:#E06C75;">(func</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> argv)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOK_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)  </span><span style="color:#61AFEF;">_RT_OBJECT_HOOK_CALL</span><span style="color:#E06C75;">(func</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> argv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_HOOK_USING_FUNC_PTR</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__ON_HOOK_ARGS</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">__hook</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)        </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> {</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((__hook) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> RT_NULL) __hook argv; } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__ON_HOOK_ARGS</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">__hook</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* RT_HOOK_USING_FUNC_PTR */</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* RT_USING_HOOK */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rt-using-hooklist" tabindex="-1"><a class="header-anchor" href="#rt-using-hooklist" aria-hidden="true">#</a> RT_USING_HOOKLIST</h3><h4 id="rt-object-hooklist-declare" tabindex="-1"><a class="header-anchor" href="#rt-object-hooklist-declare" aria-hidden="true">#</a> RT_OBJECT_HOOKLIST_DECLARE</h4><ul><li><p>定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> Add declaration for hook list types.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@note</span><span style="color:#7F848E;font-style:italic;"> Usage:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * This is typically used in your header. In foo.h using this like:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * \`\`\`foo.h</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     typedef void (*bar_hook_proto_t)(arguments...);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     RT_OBJECT_HOOKLIST_DECLARE(bar_hook_proto_t, bar_myhook);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * \`\`\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DECLARE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handler_type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> name##_hooklistnode                 </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    {                                                  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        handler_type handler;                          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">rt_list_t</span><span style="color:#ABB2BF;"> list_node;                           </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#ABB2BF;">;                          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> name##_nested;          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> name##</span><span style="color:#61AFEF;">_sethook</span><span style="color:#E06C75;">(name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#E06C75;"> node)</span><span style="color:#ABB2BF;">;   </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> name##</span><span style="color:#61AFEF;">_rmhook</span><span style="color:#E06C75;">(name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#E06C75;"> node)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例</p><p>在头文件中调用，声明了 <code>hooklist</code> 节点和操作方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> Sets a hook function when RX indicate is called</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">thread</span><span style="color:#7F848E;font-style:italic;"> is the target thread that initializing</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hookproto_t</span><span style="color:#ABB2BF;">)(</span><span style="color:#56B6C2;">rt_device_t</span><span style="color:#ABB2BF;"> dev, </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DECLARE</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hookproto_t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> rt_hw_serial_rxind</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> rt_hw_serial_rxind_hooklistnode {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">rt_hw_serial_rxind_hookproto_t</span><span style="color:#ABB2BF;"> handler;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">rt_list_t</span><span style="color:#ABB2BF;"> list_node;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">*</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hooklistnode_t</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> rt_hw_serial_rxind_nested;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_hw_serial_rxind_sethook</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hooklistnode_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_hw_serial_rxind_rmhook</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hooklistnode_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="rt-object-hooklist-define" tabindex="-1"><a class="header-anchor" href="#rt-object-hooklist-define" aria-hidden="true">#</a> RT_OBJECT_HOOKLIST_DEFINE</h4><ul><li><p>定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@note</span><span style="color:#7F848E;font-style:italic;"> Usage</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Add this macro to the source file where your hook point is inserted.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DEFINE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)                                      </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_list_t</span><span style="color:#ABB2BF;"> name##_hooklist </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_LIST_OBJECT_INIT</span><span style="color:#E06C75;">(name##_hooklist)</span><span style="color:#ABB2BF;">; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> rt_spinlock name##lock </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> RT_SPINLOCK_INIT;                 </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> name##_nested </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;                                   </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> name##</span><span style="color:#61AFEF;">_sethook</span><span style="color:#E06C75;">(name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#E06C75;"> node)</span><span style="color:#ABB2BF;">                          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    {                                                                        </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock)</span><span style="color:#ABB2BF;">;                </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (name##_nested)                                                </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        {                                                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                   </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock)</span><span style="color:#ABB2BF;">;                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        }                                                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_list_insert_before</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##_hooklist</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">node</span><span style="color:#E06C75;">-&gt;list_node)</span><span style="color:#ABB2BF;">;           </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    }                                                                        </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> name##</span><span style="color:#61AFEF;">_rmhook</span><span style="color:#E06C75;">(name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#E06C75;"> node)</span><span style="color:#ABB2BF;">                           </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    {                                                                        </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock)</span><span style="color:#ABB2BF;">;                </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (name##_nested)                                                </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        {                                                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                   </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock)</span><span style="color:#ABB2BF;">;                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        }                                                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_list_remove</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">node</span><span style="color:#E06C75;">-&gt;list_node)</span><span style="color:#ABB2BF;">;                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">name##lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例</p><p>在源文件中调用，定义 <code>hooklist</code> 链表头节点和操作方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DEFINE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rt_hw_serial_rxind</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_list_t</span><span style="color:#ABB2BF;"> rt_hw_serial_rxind_hooklist </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_LIST_OBJECT_INIT</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rt_hw_serial_rxind_hooklist</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> rt_spinlock rt_hw_serial_rxindlock </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> rt_hw_serial_rxind_nested </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_hw_serial_rxind_sethook</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hooklistnode_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (rt_hw_serial_rxind_nested) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock, level);</span></span>
<span class="line"><span style="color:#ABB2BF;">        level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">rt_list_insert_before</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxind_hooklist, </span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">list_node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock, level);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_hw_serial_rxind_rmhook</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_hw_serial_rxind_hooklistnode_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (rt_hw_serial_rxind_nested) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock, level);</span></span>
<span class="line"><span style="color:#ABB2BF;">        level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">rt_list_remove</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">list_node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">rt_hw_serial_rxindlock, level);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="rt-object-hooklist-define-node" tabindex="-1"><a class="header-anchor" href="#rt-object-hooklist-define-node" aria-hidden="true">#</a> RT_OBJECT_HOOKLIST_DEFINE_NODE</h4><ul><li><p>定义</p><p><code>hookname</code> 对应 <code>RT_OBJECT_HOOKLIST_DECLARE</code> 和 <code>RT_OBJECT_HOOKLIST_DEFINE</code> 中的 <code>name</code>，即 <code>hooklist</code> 节点结构体和操作方法的前缀。</p><p><code>hooker_handler</code> 对应 <code>RT_OBJECT_HOOKLIST_DECLARE</code> 中 <code>handler_type</code> 类型所定义的方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> Add declaration for hook list node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@note</span><span style="color:#7F848E;font-style:italic;"> Usage</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* You can add a hook like this.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* \`\`\`addhook.c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* void myhook(arguments...) { do_something(); }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* RT_OBJECT_HOOKLIST_DEFINE_NODE(bar_myhook, myhook_node, myhook);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* void addhook(void)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*      bar_myhook_sethook(myhook);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* \`\`\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* BTW, you can also find examples codes under</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* \`examples/utest/testcases/kernel/hooklist_tc.c\`.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DEFINE_NODE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">hookname</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">nodename</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hooker_handler</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> hookname##_hooklistnode nodename </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> {                            </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        .handler </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> hooker_handler,                                         </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        .list_node </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_LIST_OBJECT_INIT</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">nodename</span><span style="color:#E06C75;">.list_node)</span><span style="color:#ABB2BF;">,              </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例</p><p>在源文件中调用。</p><p><code>_set_debug</code> 为 <code>rt_hw_serial_rxind_hookproto_t</code> 类型定义的方法。</p><p>之后可通过调用 <code>rt_hw_serial_rxind</code>_sethook 和 <code>rt_hw_serial_rxind</code>_rmhook 将 <code>hooklist</code> 节点 <code>_set_debug_node</code> 注册和移除链表。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_set_debug</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">rt_device_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">dev</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_DEFINE_NODE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rt_hw_serial_rxind</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> _set_debug_node</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> _set_debug</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="rt-object-hooklist-call" tabindex="-1"><a class="header-anchor" href="#rt-object-hooklist-call" aria-hidden="true">#</a> RT_OBJECT_HOOKLIST_CALL</h4><ul><li><p>定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> Add hook list point in the routines. Multiple hookers in the list will</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        be called one by one starting from head node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@note</span><span style="color:#7F848E;font-style:italic;"> Usage:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* void foo() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*     do_something();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*     RT_OBJECT_HOOKLIST_CALL(foo);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*     do_other_things();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_RT_OBJECT_HOOKLIST_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">nodetype</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">nested</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">list</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">lock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;">                                                                </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    {                                                                 </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        nodetype iter, next;                                          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#ABB2BF;"> level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">lock)</span><span style="color:#ABB2BF;">;               </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        nested </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;                                                  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                      </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">rt_list_isempty</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">list)</span><span style="color:#ABB2BF;">)                                  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        {                                                             </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">rt_list_for_each_entry_safe</span><span style="color:#E06C75;">(iter</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> list_node)</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            {                                                         </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;"> argv;                                   </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">            }                                                         </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        }                                                             </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        level </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_spin_lock_irqsave</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">lock)</span><span style="color:#ABB2BF;">;                          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        nested </span><span style="color:#C678DD;">-=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;                                                  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">rt_spin_unlock_irqrestore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> level)</span><span style="color:#ABB2BF;">;                      </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">)                        </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_RT_OBJECT_HOOKLIST_CALL</span><span style="color:#E06C75;">(name##</span><span style="color:#56B6C2;">_hooklistnode_t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> name##_nested</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#E06C75;">                            name##_hooklist</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> name##lock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> argv)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例</p><p>逐个调用链表中的每个节点。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">RT_OBJECT_HOOKLIST_CALL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rt_hw_serial_rxind</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dev</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="rt-kservice-using-stdlib、rt-kservice-using-stdlib-memory" tabindex="-1"><a class="header-anchor" href="#rt-kservice-using-stdlib、rt-kservice-using-stdlib-memory" aria-hidden="true">#</a> RT_KSERVICE_USING_STDLIB、RT_KSERVICE_USING_STDLIB_MEMORY</h3><p>使能后使用 C 库函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* kstring */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_KSERVICE_USING_STDLIB_MEMORY</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_memset</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_memcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_memmove</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_int32_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_memcmp</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* RT_KSERVICE_USING_STDLIB_MEMORY */</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_strdup</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strnlen</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_ubase_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">maxlen</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_KSERVICE_USING_STDLIB</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_strstr</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">str1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">str2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_int32_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strcasecmp</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_strcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dst</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#61AFEF;">rt_strncpy</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_int32_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strncmp</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">rt_size_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_int32_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strcmp</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">rt_size_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RT_KSERVICE_USING_STDLIB_MEMORY</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_memset</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)      </span><span style="color:#61AFEF;">memset</span><span style="color:#E06C75;">(s</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> count)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_memcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dst</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)  </span><span style="color:#61AFEF;">memcpy</span><span style="color:#E06C75;">(dst</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> count)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_memmove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">)    </span><span style="color:#61AFEF;">memmove</span><span style="color:#E06C75;">(dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> n)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_memcmp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)    </span><span style="color:#61AFEF;">memcmp</span><span style="color:#E06C75;">(cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ct</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> count)</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* RT_KSERVICE_USING_STDLIB_MEMORY */</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strstr</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">str2</span><span style="color:#ABB2BF;">)       </span><span style="color:#61AFEF;">strstr</span><span style="color:#E06C75;">(str1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> str2)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strcasecmp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)         </span><span style="color:#61AFEF;">strcasecmp</span><span style="color:#E06C75;">(a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> b)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)        </span><span style="color:#61AFEF;">strcpy</span><span style="color:#E06C75;">(dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> src)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strncpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dest</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">)    </span><span style="color:#61AFEF;">strncpy</span><span style="color:#E06C75;">(dest</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> n)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strncmp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">)   </span><span style="color:#61AFEF;">strncmp</span><span style="color:#E06C75;">(cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ct</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> count)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strcmp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ct</span><span style="color:#ABB2BF;">)           </span><span style="color:#61AFEF;">strcmp</span><span style="color:#E06C75;">(cs</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ct)</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">)              </span><span style="color:#61AFEF;">strlen</span><span style="color:#E06C75;">(src)</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /*RT_KSERVICE_USING_STDLIB*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rt-kservice-using-tiny-size" tabindex="-1"><a class="header-anchor" href="#rt-kservice-using-tiny-size" aria-hidden="true">#</a> RT_KSERVICE_USING_TINY_SIZE</h3><p>不使能 <code>RT_KSERVICE_USING_STDLIB_MEMORY</code> 时，使能后 <code>rt_memset</code> 和 <code>rt_memcpy</code> 使用循环方式一个字节一个字节操作，效率低。</p><h3 id="rt-using-tiny-ffs" tabindex="-1"><a class="header-anchor" href="#rt-using-tiny-ffs" aria-hidden="true">#</a> RT_USING_TINY_FFS</h3><p>不使能 <code>RT_USING_CPU_FFS</code> 时，使用查表法查找第一个置位的索引。CPU 提供的方法效率最高。</p><ul><li><p>使能 <code>RT_USING_TINY_FFS</code></p><p>使用微型表，效率较低。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_uint8_t</span><span style="color:#ABB2BF;"> __lowest_bit_bitmap</span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*  0 - 7  */</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">28</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*  8 - 15 */</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">17</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">31</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">29</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 16 - 23 */</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">26</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 24 - 31 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 32 - 36 */</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">,  </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">19</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> This function finds the first bit set (beginning with the least significant bit)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* in value and return the index of that bit.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Bits are numbered starting at 1 (the least significant bit).  A return value of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* zero from any of these functions means that the argument was zero.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#7F848E;font-style:italic;"> is the value to find the first bit set in.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> return the index of the first bit set. If value is 0, then this function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* shall return 0.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__rt_ffs</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__lowest_bit_bitmap</span><span style="color:#ABB2BF;">[(</span><span style="color:#56B6C2;">rt_uint32_t</span><span style="color:#ABB2BF;">)(value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> (value </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;"> value) </span><span style="color:#C678DD;">%</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不使能 <code>RT_USING_TINY_FFS</code></p><p>直接查表</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">rt_uint8_t</span><span style="color:#ABB2BF;"> __lowest_bit_bitmap</span><span style="color:#C678DD;">[]</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 00 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 10 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 20 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 30 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 40 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 50 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 60 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 70 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 80 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 90 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* A0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* B0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* C0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* D0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* E0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* F0 */</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@brief</span><span style="color:#7F848E;font-style:italic;"> This function finds the first bit set (beginning with the least significant bit)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* in value and return the index of that bit.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Bits are numbered starting at 1 (the least significant bit).  A return value of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* zero from any of these functions means that the argument was zero.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#7F848E;font-style:italic;"> is the value to find the first bit set in.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> Return the index of the first bit set. If value is 0, then this function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*         shall return 0.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">__rt_ffs</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__lowest_bit_bitmap</span><span style="color:#ABB2BF;">[value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff00</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__lowest_bit_bitmap</span><span style="color:#ABB2BF;">[(value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff00</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff0000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__lowest_bit_bitmap</span><span style="color:#ABB2BF;">[(value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff0000</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">17</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">__lowest_bit_bitmap</span><span style="color:#ABB2BF;">[(value </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">ff000000</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="rt-using-memheap" tabindex="-1"><a class="header-anchor" href="#rt-using-memheap" aria-hidden="true">#</a> RT_USING_MEMHEAP</h3><p>使能 <code>memheap</code> 内存管理算法。</p><h3 id="rt-using-memheap-as-heap" tabindex="-1"><a class="header-anchor" href="#rt-using-memheap-as-heap" aria-hidden="true">#</a> RT_USING_MEMHEAP_AS_HEAP</h3><p>系统内存分配使用 <code>memheap</code> 内存管理算法。</p><h3 id="rt-using-memheap-auto-binding" tabindex="-1"><a class="header-anchor" href="#rt-using-memheap-auto-binding" aria-hidden="true">#</a> RT_USING_MEMHEAP_AUTO_BINDING</h3><p>将所有 <code>memheap</code> 对象作为内存分配堆。</p><h3 id="rt-using-legacy" tabindex="-1"><a class="header-anchor" href="#rt-using-legacy" aria-hidden="true">#</a> RT_USING_LEGACY</h3><p>支持旧版本的兼容性。</p><h3 id="rt-libc-using-full-tz-dst" tabindex="-1"><a class="header-anchor" href="#rt-libc-using-full-tz-dst" aria-hidden="true">#</a> RT_LIBC_USING_FULL_TZ_DST</h3><p>使用数据库对时区和夏令时进行全面版本。</p><p>会选中 <code>PKG_USING_TZ_DATABASE</code> 软件包。</p><h3 id="rt-libc-using-light-tz-dst" tabindex="-1"><a class="header-anchor" href="#rt-libc-using-light-tz-dst" aria-hidden="true">#</a> RT_LIBC_USING_LIGHT_TZ_DST</h3><ul><li><p>启用轻量级时区和夏令时。与 <code>RT_LIBC_USING_FULL_TZ_DST</code> 互斥。</p></li><li><p>根据 <code>RT_LIBC_TZ_DEFAULT_HOUR</code>、<code>RT_LIBC_TZ_DEFAULT_MIN</code>、<code>RT_LIBC_TZ_DEFAULT_SEC</code> 初始化时间偏移(秒)。</p></li><li><p>可通过 <code>rt_tz_set</code> 和 <code>rt_tz_get</code> 设置和获取时间偏移(秒)。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">volatile</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int32_t</span><span style="color:#ABB2BF;"> _current_tz_offset_sec </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    RT_LIBC_TZ_DEFAULT_HOUR </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3600</span><span style="color:#E06C75;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> RT_LIBC_TZ_DEFAULT_MIN </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">60</span><span style="color:#E06C75;">U</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> RT_LIBC_TZ_DEFAULT_SEC;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* return current timezone offset in seconds */</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_tz_set</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int32_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">offset_sec</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    _current_tz_offset_sec </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> offset_sec;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int32_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_tz_get</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> _current_tz_offset_sec;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int8_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rt_tz_is_dst</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">U</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> /* TODO */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function D(v,C){const l=o("RouterLink");return p(),e("div",null,[i,y,s("ul",null,[A,s("li",null,[F,s("p",null,[t(l,{to:"/note/RT-Thread/%E8%A3%81%E5%89%AA%E5%88%86%E6%9E%90.html#%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AE"},{default:c(()=>[n("RT-Thread 裁剪分析")]),_:1})])])]),d])}const E=a(B,[["render",D],["__file","各版本配置项分析.html.vue"]]);export{E as default};
